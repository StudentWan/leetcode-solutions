### 题目描述

### 15. 3Sum

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

    For example, given array S = [-1, 0, 1, 2, -1, -4],

    A solution set is:
    [
        [-1, 0, 1],
        [-1, -1, 2]
    ]

### 代码及思路：

#### 我的代码及思路：

```java
    /*
    本算法的时间复杂度是O(n^2)(不考虑HashMap的开销的话，因为contains这类方法的时间复杂度还是很高的)

    思路不算复杂，但注意的细节却十分复杂。

    思路是先将数组排序，然后从第一个元素开始，剔除3Sum中的a，将问题转化为求b + c = 0 - a(即 Two Sum)，在求Two Sum的过程中使用HashMap求Two Sum的方法。

    需要注意的是如何减小时间复杂度且如何去重。

    比如 nums[i] == nums[i - 1]时，这个nums[i]其实已经被考虑过了，可以跳过

    比如当nums[i] > 0时，由于已将数组排好序，所以也可以不考虑

    如果nums[j]已经被加入List，并且nums[j] == nums[j + 1]，那么nums[j + 1]这一项可以跳过。

    还是很复杂的，学习到的方法要稍微简单一点，开销也更低。
    */
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int[] tempArr = new int[3];
        for (int i = 0; i < nums.length - 1; i++) {
            if ((i == 0 || (i > 0 && nums[i] != nums[i - 1])) && nums[i] <= 0) {
                int target = 0 - nums[i];
                HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
                for (int j = i + 1; j < nums.length; j++) {
                    if (!map.containsKey(target - nums[j])) {
                        map.put(nums[j], j);
                    }
                    else {
                        List<Integer> list = new ArrayList<Integer>();
                        // 这里是按序的
                        list.add(nums[i]);
                        list.add(target - nums[j]);
                        list.add(nums[j]);
                        result.add(list);
                        // 如果nums[j]和nums[j + 1]相等，那么nums[j + 1]这一项可以跳过
                        while(j < nums.length - 1 && nums[j] == nums[j + 1]) j++;
                    }
                }
            }
        }
        return result;
    }
```

#### 学习到的代码及思路：

```java
    /*
    本算法的时间复杂度是确切的O(n)

    想法同样是将求a + b + c = 0转化为求 b + c = 0 - a的Two Sum问题

    要降低时间复杂度和去重的点也和上一解法一致，但是由于数组可以排好序，所以本算法使用的是Two Pointers来求Two Sum，不需要额外的集合框架方法的开销，所以时间复杂度较低。
    */
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        for (int i = 0; i < nums.length - 1; i++) {
            if ((i == 0 || (i > 0 && nums[i] != nums[i - 1])) && nums[i] <= 0) {
                int low = i + 1;
                int high = nums.length - 1;
                int target = 0 - nums[i];
                while (low < high) {
                    if (nums[low] + nums[high] == target) {
                        result.add(Arrays.asList(nums[i], nums[low], nums[high]));
                        while (low < high && nums[low] == nums[low + 1]) {
                            low++;
                        }
                        while (low < high && nums[high] == nums[high - 1]) {
                            high--;
                        }
                        low++;
                        high--;
                    }
                    else if (nums[low] + nums[high] < target) {
                        low++;
                    }
                    else {
                        high--;
                    }
                }
            }
        }
        return result;
    }
```