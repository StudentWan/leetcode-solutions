### 题目描述

#### 18. 4Sum

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

`Note:` The solution set must not contain duplicate quadruplets.

    For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

    A solution set is:
    [
    [-1,  0, 0, 1],
    [-2, -1, 1, 2],
    [-2,  0, 0, 2]
    ]

### 代码及思路：

#### 我的代码及思路：

```java
    /*
    本算法的时间复杂度是O(n^3)

    基本的思想是将问题的难度降维，从4Sum降低到3Sum，再降低到2Sum，这时候就可以运用我们熟练掌握的Two Pointers算法了。

    一些小的tricks是如何remove duplicate，在4维，3维和2维的情况下都要注意去重，去除所有的重复情况之后就可以AC。

    看了一下Disscuss区其他更快的算法也是采用这样的思路，速度更快是因为去除了更多impossible的情况来达到的，所以今天主要就记录这个思想。
    */
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        for (int i = 0; i < nums.length - 2; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                for (int j = i + 1; j < nums.length - 1; j++) {
                    if (j == i + 1 || nums[j] != nums[j - 1]) {
                        int low = j + 1;
                        int high = nums.length - 1;
                        int twoTarget = target - nums[i] - nums[j];
                        while (low < high) {
                            if (nums[low] + nums[high] < twoTarget) {
                                low++;
                            }
                            else if (nums[low] + nums[high] > twoTarget) {
                                high--;
                            }
                            else {
                                result.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));
                                while (low < high && nums[low] == nums[low + 1]) {
                                    low++;
                                }
                                while (low < high && nums[high] == nums[high - 1]) {
                                    high--;
                                }
                                low++;
                                high--;
                            }
                        }
                    }
                }
            }
        }
        return result;
    }
```
